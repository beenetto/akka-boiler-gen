@Library('Common@master') _
import com.bynder.DockerRegistry;
import com.bynder.utils.Environment;

pipeline {
  options {
    timeout(time: 1, unit: 'HOURS')
  }
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yaml generatePodYaml("sonarscanner", "container-tools", "kaniko")
    }
  }
  environment {
    REPO_NAME = getRepoName()
    DOCKER_REGISTRY = new DockerRegistry(Environment.SHARED).getRegistryHost()
    K8S_NAMESPACE = "*k8s_namespace*"
    COMMIT_HASH = getPullRequestCommitHash()
    DOCKER_IMAGE = getDockerImageWithTag()
  }
  stages {
    stage('Lint') {
      steps {
        container('container-tools') {
          runKubeLint()
        }
      }
    }

    //stage('Unit Test') {
      //steps {
        //script {
          //container('kaniko') {
            //containerUnitTest('coverage')
          //}
        //}
      //}
    //}

    stage('Push') {
      //when {
        //branch 'master'
      //}
      steps {
        script {
          container('kaniko') {
            containerImagePush([
              commitHash: env.COMMIT_HASH,
              imageTags: getDockerImageTags()
            ])
          }
        }
      }
    }

    //stage('Run sonar scanner') {
      //steps {
        //script {
          //sonarScannerRunner = { steps -> container('sonarscanner') { steps() } }
          //runSonarScanner("scala", env.REPO_NAME, env.BUILD_NUMBER, sonarScannerRunner, false)
        //}
      //}
    //}

    //stage('Deploy stage-global') {
      //when {
        //branch 'master'
      //}
      //steps {
        //container('container-tools') {
          //kustomizeRolloutDeployment(getDeploymentConfig('stage-global', env.DOCKER_IMAGE, env.K8S_NAMESPACE))
        //}
      //}
    //}
    stage('Promote to production') {
      when {
        // Makes sure we skip the input from user if it's not master
        beforeInput true
        branch 'master'
      }
      input {
        message "Promote to production?"
      }
      parallel {
        stage("Promote production-global") {
          steps {
            container('container-tools') {
              kustomizeRolloutDeployment(getDeploymentConfig('production-global', env.DOCKER_IMAGE, env.K8S_NAMESPACE))
            }
          }
        }
        stage("Promote production-us-only") {
          steps {
            container('container-tools') {
              kustomizeRolloutDeployment(getDeploymentConfig('production-us-only', env.DOCKER_IMAGE, env.K8S_NAMESPACE))
            }
          }
        }
        stage("Promote production-eu-only") {
          steps {
            container('container-tools') {
              kustomizeRolloutDeployment(getDeploymentConfig('production-eu-only', env.DOCKER_IMAGE, env.K8S_NAMESPACE))
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        if (env.BRANCH_NAME == 'master') {
          slackSend channel: '*project_owner*', color: 'danger', message: "Master branch build failed for ${env.REPO_NAME}"
        }
      }
    }
  }
}

def getDeploymentConfig(envName, buildImage, namespace) {
  def config = [
    imageTag: "${env.DOCKER_REGISTRY}/${buildImage}",
    verify: [
      namespace: namespace,
      resourceId: "deployment/${env.REPO_NAME}"
    ],
    imageTagPlaceholder: "${env.REPO_NAME}:latest"
  ]
  if (envName) {
    config.environment = envName
  }
  return config
}

def getDockerImageWithTag() {
  def dockerTag = env.BUILD_NUMBER

  return "${getRepoName()}:${dockerTag}"
}

def getDockerImageTags() {
  if (env.CHANGE_ID) {
    return [getDockerImageWithTag()]
  } else {
    return [getDockerImageWithTag(), "${getRepoName()}:latest"]
  }
}

def getRepoName() {
  return "${env.JOB_NAME.split('/')[1]}"
}
